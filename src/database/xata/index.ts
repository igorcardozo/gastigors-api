// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from '@xata.io/client';
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from '@xata.io/client';

const tables = [
  {
    name: 'Users',
    columns: [
      { name: 'email', type: 'email', notNull: true, unique: true },
      { name: 'firstName', type: 'string', notNull: true, defaultValue: '' },
      { name: 'lastName', type: 'string', notNull: true, defaultValue: '' },
    ],
  },
  {
    name: 'Debts',
    columns: [
      { name: 'origin', type: 'link', link: { table: 'Users' } },
      { name: 'destination', type: 'link', link: { table: 'Users' } },
      { name: 'amount', type: 'float', notNull: true, defaultValue: '0' },
      { name: 'prevDebt', type: 'link', link: { table: 'Debts' } },
      { name: 'deleted', type: 'bool', notNull: true, defaultValue: 'false' },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes['Users'];
export type UsersRecord = Users & XataRecord;

export type Debts = InferredTypes['Debts'];
export type DebtsRecord = Debts & XataRecord;

export type DatabaseSchema = {
  Users: UsersRecord;
  Debts: DebtsRecord;
};

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    const defaultOptions = {
      databaseURL: process.env.DATABASE_URL,
    };

    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
